{"version":3,"sources":["algorithms/bubble-sort.js","algorithms/insertion-sort.js","algorithms/selection-sort.js","algorithms/shell-sort.js","algorithms/heap-sort.js","SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["swap","array","index1","index2","temp","bubbleSort","stages","length","slice","i","j","push","insertionSort","current","selectionSort","smallestIdx","shellSort","gap","Math","floor","convert","arr","index","arrLength","leftIndex","rightIndex","max","firstIndex","lastIndex","heapSort","SortingVisualizer","useState","speed","setSpeed","size","setSize","sorting","setSorting","setSortingParams","sliderSize","document","getElementById","sliderSpeed","value","createCircles","min","numberList","parseInt","random","list","setList","circles","getElementsByClassName","shrinkAnimation","circleOne","circleTwo","animate","width","height","marginLeft","marginRight","marginTop","duration","bubbleInsert","setTimeout","firstCircle","secondCircle","style","border","background","selectionShellHeap","includes","borderColor","sortByType","type","a","alert","className","onClick","id","name","disabled","onChange","Box","boxShadow","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fdd064a9.chunk.js","sourcesContent":["\nconst bubbleSort = array => {\n    let stages = []\n    let length = array.length\n    array = array.slice(0)\n    for(let i = 0; i < length; i++) {\n        for(let j = 0; j < length - i - 1; j++) {\n            if(array[j] > array[j + 1]) {\n                stages.push([j, j + 1])\n                stages.push([j + 1, j])\n                swap(array, j, j + 1)\n            }\n        }\n    }\n    return stages\n}\n\nconst swap = (array, index1, index2) => {\n    let temp = array[index1]\n    array[index1] = array[index2]\n    array[index2] = temp\n}\n\nexport default bubbleSort\n\n","const insertionSort = array => {\n    let stages = []\n    array = array.slice(0)\n    let length = array.length\n    for(let i = 1; i < length; i++) {\n        let current = array[i]\n        let j = i - 1\n        while((j > -1) && (current < array[j])) {\n            stages.push([j, j + 1])\n            stages.push([j + 1, j])\n            array[j + 1] = array[j]\n            j--\n        }\n        array[j + 1] = current\n    }\n    return stages\n}\n\nexport default insertionSort","const selectionSort = array => {\n    let stages = []\n    let length = array.length\n    array = array.slice(0)\n    for (let i = 0; i < length - 1; i++) {\n        let smallestIdx = i\n        for (let j = i + 1; j < array.length; j++) {\n            stages.push([smallestIdx, j, 'compare1'])\n            stages.push([smallestIdx, j, 'compare2'])\n            if (array[j] < array[smallestIdx]) smallestIdx = j\n        }\n        stages.push([i, smallestIdx, 'swap'])\n        let temp = array[i]\n        array[i] = array[smallestIdx]\n        array[smallestIdx] = temp\n    }\n    return stages\n}\n\nexport default selectionSort","const shellSort = array => {\n    let stages  = []\n    array = array.slice(0)\n    let length = array.length\n    let gap = array.length\n    while (gap >= 1) {\n        for (let i = 0; i < length; i += gap) {\n            for (let j = i; j > 0; j -= gap) {\n                if (array[j] < array[j - gap]) {\n                    stages.push([j, j - gap, 'compare1'])\n                    stages.push([j, j - gap, 'compare2'])\n                    stages.push([j, j - gap, 'swap'])\n                    let temp = array[j]\n                    array[j] = array[j - gap]\n                    array[j - gap] = temp\n                }\n            }\n        }\n        gap = Math.floor(gap / 2)\n    }\n    return stages\n}\nexport default shellSort","const heapSort = array => {\n    let stages = []\n    let length = array.length;\n    array = array.slice(0)\n    for (let i = Math.floor(length / 2); i >= 0; i--) {\n        convert(array, i, length, stages)\n    }\n    for (let i = length - 1; i > 0; i--) {\n        swap(array, 0, i, stages)\n        length--;\n        convert(array, 0, length, stages)\n    }\n    return stages\n}\n\n    const convert = (arr, index, arrLength, stages) => {\n        let leftIndex = 2 * index + 1\n        let rightIndex = 2 * index + 2\n\n        let max = index\n        if (leftIndex < arrLength && arr[leftIndex] > arr[max]) {\n            stages.push([leftIndex, max, 'compare1'])\n            stages.push([leftIndex, max, 'compare2'])\n            max = leftIndex\n        }\n        if (rightIndex < arrLength && arr[rightIndex] > arr[max]) {\n            stages.push([rightIndex, max, 'compare1'])\n            stages.push([rightIndex, max, 'compare2'])\n            max = rightIndex\n        }\n        if (max !== index) {\n\n            swap(arr, index, max, stages)\n            convert(arr, max, arrLength, stages)\n        }\n    }\n\n    const swap = (arr, firstIndex, lastIndex, stages) => {\n        stages.push([firstIndex, lastIndex, 'swap'])\n        let temp = arr[firstIndex]\n        arr[firstIndex] = arr[lastIndex]\n        arr[lastIndex] = temp\n}\n\nexport default heapSort","import React, {useState} from 'react'\nimport { Box } from '@material-ui/core'\nimport bubbleSort from './algorithms/bubble-sort'\nimport insertionSort from './algorithms/insertion-sort'\nimport selectionSort from './algorithms/selection-sort'\nimport shellSort from './algorithms/shell-sort'\nimport heapSort from './algorithms/heap-sort'\n\nconst SortingVisualizer = () => {\n    const [speed, setSpeed] = useState(500)\n    const [size, setSize] = useState(141)\n    const [sorting, setSorting] = useState(false)\n\n    const getRandomInt = (min, max) => {\n        return parseInt(Math.random() * (max - min) + min)\n    }\n\n    const setSortingParams = () => {\n        let sliderSize = document.getElementById('size')\n        let sliderSpeed = document.getElementById('speed')\n        setSize(sliderSize.value)\n        setSpeed(301 - sliderSpeed.value)\n    }\n\n    const createCircles = () => {\n        let numberList = []\n        for (let i = 0; i < size; i++) numberList.push(getRandomInt(1, 286))\n        return numberList\n    }\n\n    const [list, setList] = useState(createCircles())\n    const circles = list && document.getElementsByClassName('sorting-visualizer__circle')\n    const shrinkAnimation = (circleOne, circleTwo) => {\n        circles[circleOne].animate([{\n            width: '0px',\n            height: '0px',\n            marginLeft: '22.5px',\n            marginRight: '22.5px',\n            marginTop: '18px'\n        }, {width: '35px', height: '35px', marginTop: '0px'}], {duration: speed})\n        circles[circleTwo].animate([{\n            width: '0px',\n            height: '0px',\n            marginLeft: '22.5px',\n            marginRight: '22.5px',\n            marginTop: '18px'\n        }, {width: '35px', height: '35px', marginTop: '0px'}], {duration: speed})\n    }\n\n    const bubbleInsert = stages => {\n        for (let i = 0; i < stages.length; i++) {\n            if (i % 2 !== 1) {\n                setTimeout(() => {\n                    const [firstCircle, secondCircle] = stages[i]\n                    circles[firstCircle].style.border = '4px white solid'\n                    circles[secondCircle].style.border = '4px white solid'\n                }, i * speed)\n            } else {\n                setTimeout(() => {\n                    const [firstCircle, secondCircle] = stages[i]\n                    circles[firstCircle].style.border = 'none'\n                    circles[secondCircle].style.border = 'none'\n                    shrinkAnimation(firstCircle, secondCircle)\n                    let temp = circles[firstCircle].style.background\n                    circles[firstCircle].style.background = circles[secondCircle].style.background\n                    circles[secondCircle].style.background = temp\n                    if (i === stages.length - 1) setSorting(false)\n                }, i * speed)\n\n            }\n        }\n    }\n\n    const selectionShellHeap = stages => {\n        for(let i = 0; i < stages.length; i++) {\n            const compare  = stages[i][2].includes('compare')\n            if (compare) {\n                const [firstCircle, secondCircle] = stages[i]\n                let borderColor = stages[i][2] === 'compare1' ? '4px white solid' : 'none'\n                setTimeout(() => {\n                    circles[firstCircle].style.border = borderColor\n                    circles[secondCircle].style.border = borderColor\n                }, i * speed)\n            } else {\n                setTimeout(() => {\n                    const [firstCircle, secondCircle] = stages[i]\n                    shrinkAnimation(firstCircle, secondCircle)\n                    let temp = circles[firstCircle].style.background\n                    circles[firstCircle].style.background = circles[secondCircle].style.background\n                    circles[secondCircle].style.background = temp\n                    if (i === stages.length - 1) setSorting(false)\n                }, i * speed)\n            }\n        }\n    }\n\n    const sortByType = async type => {\n        setSorting(true)\n        switch (type) {\n            case 'Bubble': {\n                const stages = bubbleSort(list)\n                bubbleInsert(stages)\n                break\n            }\n            case 'Insertion': {\n                const stages = insertionSort(list)\n                bubbleInsert(stages)\n                break\n            }\n            case 'Selection': {\n                const stages = selectionSort(list)\n                selectionShellHeap(stages)\n                break\n            }\n            case 'Shell': {\n                const stages = shellSort(list)\n                selectionShellHeap(stages)\n                break\n            }\n            case 'Heap': {\n                const stages = heapSort(list)\n                selectionShellHeap(stages)\n                break\n            }\n            default:\n                alert('Invalid')\n                break\n        }\n    }\n\n    return (\n        <div className=\"sorting-visualizer\">\n            <div className=\"sorting-visualizer__header\">\n                <h1>Sorting Visualizer</h1>\n                <div className=\"sorting-visualizer__button-container\">\n                    {!sorting ?\n                        <div className=\"sorting-visualizer__algorithm\" onClick={() => sortByType('Bubble')}>Bubble\n                            Sort</div> : <div className=\"sorting sorting-visualizer__algorithm\">Bubble Sort</div>}\n                    {!sorting ?\n                        <div className=\"sorting-visualizer__algorithm\" onClick={() => sortByType('Insertion')}>Insertion\n                            Sort</div> : <div className=\"sorting sorting-visualizer__algorithm\">Insertion Sort</div>}\n                    {!sorting ?\n                        <div className=\"sorting-visualizer__algorithm\" onClick={() => sortByType('Selection')}>Selection\n                            Sort</div> : <div className=\"sorting sorting-visualizer__algorithm\">Selection Sort</div>}\n                    {!sorting ?\n                        <div className=\"sorting-visualizer__algorithm\" onClick={() => sortByType('Shell')}>Shell\n                            Sort</div> : <div className=\"sorting sorting-visualizer__algorithm\">Shell Sort</div>}\n                    {!sorting ?\n                        <div className=\"sorting-visualizer__algorithm\" onClick={() => sortByType('Heap')}>Heap\n                            Sort</div> : <div className=\"sorting sorting-visualizer__algorithm\">Heap Sort</div>}\n                </div>\n            </div>\n            {!sorting ?\n                <div className=\"sorting-visualizer__size\">Size: <input type=\"range\" id=\"size\" name=\"size\" min=\"4\"\n                                                                       max=\"286\" onChange={setSortingParams}/></div> :\n                <div className=\"sorting sorting-visualizer__size\">Size: <input type=\"range\" id=\"size\" name=\"size\"\n                                                                               min=\"4\" max=\"286\" disabled/></div>}\n            {!sorting ?\n                <div className=\"sorting-visualizer__speed\">Speed: <input type=\"range\" id=\"speed\" name=\"speed\" min=\"1\"\n                                                                         max=\"300\" onChange={setSortingParams}/></div> :\n                <div className=\"sorting sorting-visualizer__speed\">Speed: <input type=\"range\" id=\"speed\" name=\"speed\"\n                                                                                 min=\"1\" max=\"300\" disabled/></div>}\n            {!sorting ? <div className=\"sorting-visualizer__generate-array\" onClick={() => setList(createCircles())}>Reset\n                Array</div> : <div className=\"sorting sorting-visualizer__generate-array\">Reset Array</div>}\n            {list && <Box boxShadow={23} className=\"sorting-visualizer__circle-container\">{\n                list.map((value, index) => {\n                    return <div className=\"sorting-visualizer__circle\"\n                                style={{background: `radial-gradient(circle at 65% 15%, white 1px, hsl(${value}, 100%, 50%), hsl(${value}, 100%, 30%) 60%)`}}\n                                                   key={index}></div>\n                })\n            }</Box>}\n        </div>\n    )\n}\nexport default SortingVisualizer","import React from 'react'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport SortingVisualizer from './SortingVisualizer'\n\nfunction App() {\n  return (\n    <SortingVisualizer />\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}